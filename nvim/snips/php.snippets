global !p
import datetime

_adobe_comment = '''
/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 * Copyright {year} Adobe
 * All Rights Reserved.
 *
 * NOTICE: All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 *************************************************************************/
'''

ADOBE_HEADER = _adobe_comment.strip().format(year = datetime.date.today().year)
endglobal

snippet ns "current namespace" w
`!v v:lua.NormalizeNamespace(expand('%:h'))`
endsnippet

snippet nsp "parent namespace" w
`!v v:lua.NormalizeNamespace(expand('%:h:h'))`
endsnippet

# helpers
snippet vd "var_dump" w
var_dump($1);
endsnippet

snippet dd "dump and die" w
var_dump($1);die();
endsnippet

snippet logger "User logger trait" b
use \Behance\Core\Logger\Traits\LoggerTrait;

const LOG_CHANNEL_DEFAULT = $0;
endsnippet

snippet info "Create an info log" b
$this->_getLogger()->info('$1');
endsnippet

snippet notice "Create an info log" b
$this->_getLogger()->notice('$1');
endsnippet

snippet warning "Create an info log" b
$this->_getLogger()->warning('$1');
endsnippet

snippet error "Create an error log" b
$this->_getLogger()->error('$1');
endsnippet

snippet class "Default class declaration template" b
<?php

`!p snip.rv = ADOBE_HEADER`

namespace ${1:`!v v:lua.NormalizeNamespace(expand('%:h'))`};

class `!v expand('%:t:r')` {

	$0

}
endsnippet

snippet tclass "Default test class declaration template" b
<?php

`!p snip.rv = ADOBE_HEADER`

namespace ${1:`!v v:lua.NormalizeNamespace(expand('%:h'))`};

class `!v expand('%:t:r')` extends \NetworkUnitTest {

	$0

}
endsnippet

snippet qclass "Query object class declaration template" b
<?php

`!p snip.rv = ADOBE_HEADER`

namespace ${1:`!v v:lua.NormalizeNamespace(expand('%:h'))`};

class `!v expand('%:t:r')` {

	$0

}
endsnippet

snippet qhclass "Query handler class declaration template" b
<?php

`!p snip.rv = ADOBE_HEADER`

namespace ${1:`!v v:lua.NormalizeNamespace(expand('%:h'))`};

use ${1/QueryHandlers/Queries/};

class `!v expand('%:t:r')` {

	public function __invoke(Queries\\`!v expand('%:t:r')` $query) : array {

		$0

	}

}
endsnippet

snippet cclass "Command class declaration template" b
<?php

`!p snip.rv = ADOBE_HEADER`

namespace ${1:`!v v:lua.NormalizeNamespace(expand('%:h'))`};

use Behance\Core\CommandBus;

class `!v expand('%:t:r')` extends CommandBus\CommandAbstract {

	$0

}
endsnippet

snippet caclass "Command async class declaration template" b
<?php

`!p snip.rv = ADOBE_HEADER`

namespace ${1:`!v v:lua.NormalizeNamespace(expand('%:h'))`};

use Behance\Core\CommandBus;

class `!v expand('%:t:r')` extends CommandBus\AsyncCommandAbstract {

	$0

	protected function _pack() : array {

		return [];

	}

	public static function unpack(array $packed) : CommandBus\CommandAbstract {

		return new static();

	}

}
endsnippet

snippet cvar "@var extension for command handler classes" b
/** @var \\`!v substitute(v:lua.NormalizeNamespace(expand('%:r')), '\(Command\)\?Handlers', 'Commands', '')` */
endsnippet

snippet chclass "Command handler class declaration template" b
<?php

`!p snip.rv = ADOBE_HEADER`

namespace ${1:`!v v:lua.NormalizeNamespace(expand('%:h'))`};

use Behance\Core\CommandBus;
use Symfony\Component\EventDispatcher;

class ${2:`!v expand('%:t:r')`} implements CommandBus\HandlerInterface {

	public function handle(CommandBus\CommandAbstract $command, CommandBus $bus, EventDispatcher\EventDispatcherInterface $event_dispatcher) {

		/** @var \\${1/Command?Handlers/Commands/}\\$2 $command */

		$0

	}

}
endsnippet

post_jump "if snip.tabstop == 0: del snip.buffer[snip.tabstops[3].start[0]]"
snippet eclass "Enum class" b
<?php

`!p snip.rv = ADOBE_HEADER`

namespace ${1:`!v v:lua.NormalizeNamespace(expand('%:h'))`};

use MyCLabs\Enum;

/**`!p
words = t[3].split()
for word in words:
	snip += ' * @method static \\%s\\%s %s()' % (t[1], t[2], word.upper())
`
 *
 * @psalm-immutable
 */
class ${2:`!v expand('%:t:r')`} extends Enum\Enum {
${3:word_list}
`!p
words = t[3].split()
snip >> 1
for word in words:
	snip += "const %s = '%s';" % (word.upper(), word)
snip + ""
`
}
endsnippet

pre_expand "del snip.buffer[snip.line - 1]"
snippet constr "__construct()" b
${1:`!p
tokens = t[1].split(',')
for var in tokens:
	type_var = var.strip().split()
	variable = type_var[-1] if type_var else ""
	has_type = len(type_var) > 1
	snip += "private %s$_%s;" % (type_var[0] + " " if has_type else "", variable[1:])
snip += ""
`}
public function __construct(${1:$dependencies}) {
`!p
tokens = t[1].split(',')
snip >> 1
for var in tokens:
	type_var = var.strip().split()
	variable = type_var[-1] if type_var else ""
	snip += "$this->_%s = %s;" % (variable[1:], variable)
snip += ""
`
}
endsnippet

pre_expand "del snip.buffer[snip.line - 1]"
post_jump "if snip.tabstop == 0: del snip.buffer[len(snip.buffer)-2]"
snippet gconstr "__construct() with getters" b
${1:`!p
tokens = t[1].split(',')
for var in tokens:
	type_var = var.strip().split()
	variable = type_var[-1] if type_var else ""
	has_type = len(type_var) > 1
	snip += "private %s$_%s;" % (type_var[0] + " " if has_type else "", variable[1:])
snip += ""
`}
public function __construct(${1:$dependencies}) {
`!p
tokens = t[1].split(',')
snip >> 1
for var in tokens:
	type_var = var.strip().split()
	variable = type_var[-1] if type_var else ""
	snip += "$this->_%s = %s;" % (variable[1:], variable)
snip += ""
`
}
`!p
tokens = t[1].split(',')
for var in tokens:
	type_var = var.strip().split()
	has_type = len(type_var) > 1
	variable = type_var[-1] if type_var else ""
	variable_name = variable[1:]
	variable_tokens = variable_name.split('_')
	variable_tokens = map(lambda tok: tok[0].upper() + tok[1:] if tok else "", variable_tokens)
	variable_camel_case = "".join(variable_tokens)
	snip += "public function get%s()%s {" % (variable_camel_case, " : " + type_var[0] if has_type else "")
	snip >> 1
	snip += ""
	snip += "return $this->_%s;" % variable_name
	snip += ""
	snip << 1
	snip += "}"
	snip += ""
`
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2:$param}) ${3:: void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2:$param}) ${3:: void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2:$param}) ${3:: void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet

snippet pubs "Public static function" b
public static function ${1:name}(${2:$param}) ${3:void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet

snippet pros "Protected static function" b
protected static function ${1:name}(${2:$param}) ${3:void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet

snippet pris "Private static function" b
private static function ${1:name}(${2:$param}) ${3:void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet

snippet regh "Register a command/query to a handler" b
$container[$1::class] = (function(${2:Pimple\\Container $container}) : ${1/Commands/CommandHandlers/} {
	return new ${1/Commands/CommandHandlers/}($0);
});
endsnippet

snippet mock "Test create mock snipper" w
$this->createMock($0);
endsnippet

snippet exo  "Test expects once" w
expects($this->once())
	$0
endsnippet

snippet exn  "Test expects never" w
expects($this->never())
	$0
endsnippet

snippet exe  "Test expects exactly" w
expects($this->exactly($1))
	$0
endsnippet

snippet setup "Setup method for tests" b
protected function setUp() : void {

	$0

}
endsnippet
