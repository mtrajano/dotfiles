snippet php "php start tag" b
<?php

$0
endsnippet

snippet cn "class name" w
`!v expand('%:t:r')`
endsnippet

# helpers
snippet vd "var_dump" w
var_dump($1);
endsnippet

snippet dd "dump and die" w
var_dump($1);die();
endsnippet


pre_expand "del snip.buffer[snip.line - 1]"
snippet constr "__construct()" b
${1:`!p
if t[1]:
	tokens = t[1].split(',')
	for var in tokens:
		type_var = var.strip().split()
		variable = type_var[-1] if type_var else ""
		has_type = len(type_var) > 1
		snip += "private %s$_%s;" % (type_var[0] + " " if has_type else "", variable[1:])
	snip += ""
else:
	snip.rv = ""
`}
public function __construct(${1:$dependencies}) {
`!p
if t[1]:
	tokens = t[1].split(',')
	snip >> 1
	for var in tokens:
		type_var = var.strip().split()
		variable = type_var[-1] if type_var else ""
		snip += "$this->_%s = %s;" % (variable[1:], variable)
	snip += ""
else:
	snip.rv = ""
`
}
endsnippet


pre_expand "del snip.buffer[snip.line - 1]"
post_jump "if snip.tabstop == 0: del snip.buffer[len(snip.buffer)-2]"
snippet gconstr "__construct() with getters" b
${1:`!p
tokens = t[1].split(',')
for var in tokens:
	type_var = var.strip().split()
	variable = type_var[-1] if type_var else ""
	has_type = len(type_var) > 1
	snip += "private %s$_%s;" % (type_var[0] + " " if has_type else "", variable[1:])
snip += ""
`}
public function __construct(${1:$dependencies}) {
`!p
tokens = t[1].split(',')
snip >> 1
for var in tokens:
	type_var = var.strip().split()
	variable = type_var[-1] if type_var else ""
	snip += "$this->_%s = %s;" % (variable[1:], variable)
snip += ""
`
}
`!p
tokens = t[1].split(',')
for var in tokens:
	type_var = var.strip().split()
	has_type = len(type_var) > 1
	variable = type_var[-1] if type_var else ""
	variable_name = variable[1:]
	variable_tokens = variable_name.split('_')
	variable_tokens = map(lambda tok: tok[0].upper() + tok[1:] if tok else "", variable_tokens)
	variable_camel_case = "".join(variable_tokens)
	snip += "public function get%s()%s {" % (variable_camel_case, " : " + type_var[0] if has_type else "")
	snip >> 1
	snip += ""
	snip += "return $this->_%s;" % variable_name
	snip += ""
	snip << 1
	snip += "}"
	snip += ""
`
endsnippet


snippet pub "Public function" b
public function ${1:name}(${2:$param}) ${3:: void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet


snippet pro "Protected function" b
protected function ${1:name}(${2:$param}) ${3:: void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet


snippet pri "Private function" b
private function ${1:name}(${2:$param}) ${3:: void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet


snippet pubs "Public static function" b
public static function ${1:name}(${2:$param}) ${3:: void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet


snippet pros "Protected static function" b
protected static function ${1:name}(${2:$param}) ${3:: void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet


snippet pris "Private static function" b
private static function ${1:name}(${2:$param}) ${3:: void} {

	${VISUAL}${5:return null;}

}
$0
endsnippet


###############
# TEST SNIPPETS
###############
snippet mock "Test create mock" w
$this->createMock($0);
endsnippet

snippet mockb "Test create mock builder" w
$this->getMockBuilder($1)$0
	->getMock();
endsnippet

snippet asame "Assert Same" b
$this->assertSame($0);
endsnippet

snippet aequals "Assert Equals" b
$this->assertEquals($0);
endsnippet

snippet anull "Assert Null" b
$this->assertNull($0);
endsnippet

snippet atrue "Assert True" b
$this->assertTrue($0);
endsnippet

snippet afalse "Assert False" b
$this->assertFalse($0);
endsnippet

snippet aiof "Assert Instance Of" b
$this->assertInstanceOf($1, $2);
endsnippet

snippet exo  "Test expects once" w
expects($this->once())
endsnippet

snippet exn  "Test expects never" w
expects($this->never())
endsnippet

snippet exe  "Test expects exactly" w
expects($this->exactly($1))
endsnippet

snippet setup "Setup method for tests" b
protected function setUp() : void {

	$0

}
endsnippet

snippet test "Test method" b
public function test$1() : void {

	$0

}
endsnippet
